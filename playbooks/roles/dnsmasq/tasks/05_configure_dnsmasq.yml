---

- name: Get network manager connection name
  shell: nmcli device show {{ item }} | grep GENERAL.CONNECTION | cut -d ":" -f 2 | awk '{$1=$1}1'
  register: nmcli_conn_name
  with_items: "{{ ansible_interfaces }}"
  when:
    - hostvars[inventory_hostname]['ansible_' + item] is defined
    - hostvars[inventory_hostname]['ansible_' + item].ipv4 is defined
    - hostvars[inventory_hostname]['ansible_' + item].ipv4.address == hostvars[inventory_hostname].management_ipv4

- name: Get management interface device id
  set_fact:
    management_interface: "{{ item }}"
  with_items: "{{ ansible_interfaces }}"
  when:
    - hostvars[inventory_hostname]['ansible_' + item] is defined
    - hostvars[inventory_hostname]['ansible_' + item].ipv4 is defined
    - hostvars[inventory_hostname]['ansible_' + item].ipv4.address == hostvars[inventory_hostname].management_ipv4

- fail:
    msg: "For some reason we could not find the management interface on your computer. Check that the management_ipv4 address listed in your inventory file matches the computer it is assigned to."
  when: management_interface is not defined

- name: dns list
  set_fact:
    dns_list: ["127.0.0.1"]

- name: dns list
  set_fact:
    dns_list: "{{ dns_list }} + '[ '8.8.8.8' ]"
  when: not offline or (offline is defined and offline == false)

- name: Update DNS records for the management interface
  nmcli:
    conn_name: "{{ item.stdout }}"
    type: ethernet
    autoconnect: yes
    dns4: "{{ dns_list }}"
    state: present
  with_items: "{{ nmcli_conn_name.results }}"
  when: item.stdout is defined

- name: Bump the network service
  systemd:
    name: network
    state: restarted

- name: Delete existing files
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ host_file }}"
    - "{{ conf_file }}"

- name: Remove dnsmasq
  yum:
    name: dnsmasq
    state: absent

- name: Install dnsmasq
  yum:
    name: dnsmasq
    state: installed

- name: Install BIND-Utils
  yum:
    name: bind-utils
    state: installed

- name: Copy over hosts template
  template:
    src: templates/hosts.j2
    dest: "{{ host_file }}"

# This will bind dnsmasq to only one interface
- name: Select dnsmasq bind interface
  replace:
    path: "{{ conf_file }}"
    regexp: '^#interface='
    replace: 'interface={{ management_interface }}'

- name: Force dnsmasq to only bind on that interface
  replace:
    path: "{{ conf_file }}"
    regexp: '^#bind-interfaces'
    replace: 'bind-interfaces'

- name: Updating configuration file
  replace:
    path: "{{ conf_file }}"
    regexp: '^#addn-hosts=/etc/banner_add_hosts'
    replace: 'addn-hosts={{ host_file }}'

# TODO: Add this back in when firewalld is ready
#- name: Configure firewalld
#  firewalld:
#    service: dns
#    permanent: true
#    state: enabled
#    zone: public
#    immediate: yes

- name: Start dnsmasq and enable it
  systemd:
    name: dnsmasq
    state: restarted
    enabled: yes

- name: Check if dnsmasq is running
  command: systemctl status dnsmasq
  ignore_errors: yes
  changed_when: false
  register: service_dnsmasq_status

- name: Confirm dnsmasq is running
  fail:
    msg: "dnsmasq is not running for some reason. Log into {{ inventory_hostname }} and check status with 'systemctl status dnsmasq'"
  when: service_dnsmasq_status is failed
...
